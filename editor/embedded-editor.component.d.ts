import { AfterViewInit, ElementRef, OnDestroy, OnInit } from '@angular/core';
import { MatTabGroup } from '@angular/material/tabs';
import { TerminalType } from './services/terminal-handler.service.js';
import * as i0 from "@angular/core";
export declare const EMBEDDED_EDITOR_SELECTOR = "embedded-editor";
export declare const LARGE_EDITOR_WIDTH_BREAKPOINT = 950;
export declare const LARGE_EDITOR_HEIGHT_BREAKPOINT = 550;
export declare class EmbeddedEditor implements OnInit, AfterViewInit, OnDestroy {
    editorContainer: ElementRef<HTMLDivElement>;
    matTabGroup: MatTabGroup;
    private readonly platformId;
    private readonly changeDetector;
    private readonly destroyRef;
    private readonly diagnosticsState;
    private readonly editorUiState;
    private readonly nodeRuntimeState;
    private readonly nodeRuntimeSandbox;
    private resizeObserver?;
    protected splitDirection: 'horizontal' | 'vertical';
    readonly MAX_RECOMMENDED_WEBCONTAINERS_INSTANCES = 3;
    readonly TerminalType: typeof TerminalType;
    readonly displayOnlyTerminal: import("@angular/core").Signal<boolean>;
    readonly errorsCount: import("@angular/core").WritableSignal<number>;
    readonly displayPreviewInMatTabGroup: import("@angular/core").WritableSignal<boolean>;
    readonly shouldEnableReset: import("@angular/core").Signal<boolean>;
    private readonly errorsCount$;
    private readonly displayPreviewInMatTabGroup$;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    setVisibleEmbeddedEditorTabs(): void;
    reset(): Promise<void>;
    private setFirstTabAsActiveAfterResize;
    private listenToErrorsCount;
    private setResizeObserver;
    private isLargeEmbeddedEditor;
    static ɵfac: i0.ɵɵFactoryDeclaration<EmbeddedEditor, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<EmbeddedEditor, "embedded-editor", never, {}, {}, never, never, true, never>;
}
