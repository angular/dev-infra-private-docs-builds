/*!
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.dev/license
 */
import { CommonModule, NgIf, NgSwitch, NgSwitchCase } from '@angular/common';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, DestroyRef, ViewChild, effect, inject, } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { delay, filter, map } from 'rxjs';
import { LoadingStep } from '../services/node-runtime-sandbox.service';
import { NodeRuntimeSandbox } from '../services/node-runtime-sandbox.service';
import { NodeRuntimeState } from '../services/node-runtime-state.service';
// TODO(josephperrott): Determine how we can load the preview error component dynamically again.
import { PreviewError } from './preview-error.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class Preview {
    constructor() {
        this.changeDetectorRef = inject(ChangeDetectorRef);
        this.destroyRef = inject(DestroyRef);
        this.nodeRuntimeSandbox = inject(NodeRuntimeSandbox);
        this.nodeRuntimeState = inject(NodeRuntimeState);
        this.loadingProgressValue = this.nodeRuntimeState.loadingStep;
        this.loadingEnum = LoadingStep;
        effect(async () => {
            if (this.nodeRuntimeState.loadingStep() === LoadingStep.ERROR) {
                this.previewErrorComponent = PreviewError;
                this.changeDetectorRef.markForCheck();
            }
        });
    }
    ngAfterViewInit() {
        this.nodeRuntimeSandbox.previewUrl$
            .pipe(map((url) => ({ url, previewIframe: this.previewIframe })), filter((value) => !!value.previewIframe), 
        // Note: The delay is being used here to workaround the flickering issue
        // while switching tutorials
        delay(100), takeUntilDestroyed(this.destroyRef))
            .subscribe(({ url, previewIframe }) => {
            // Known issue - Binding to the src of an iframe causes the iframe to flicker: https://github.com/angular/angular/issues/16994
            previewIframe.nativeElement.src = url ?? '';
        });
    }
}
Preview.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.1.0-next.1", ngImport: i0, type: Preview, deps: [], target: i0.ɵɵFactoryTarget.Component });
Preview.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.1.0-next.1", type: Preview, isStandalone: true, selector: "docs-tutorial-preview", viewQueries: [{ propertyName: "previewIframe", first: true, predicate: ["preview"], descendants: true }], ngImport: i0, template: "<div class=\"adev-embedded-editor-preview-container\">\n  @if (loadingProgressValue() !== loadingEnum.ERROR) {\n  <iframe\n    #preview\n    class=\"adev-embedded-editor-preview\"\n    allow=\"cross-origin-isolated\"\n    title=\"Editor preview\"\n  ></iframe>\n  } @if (previewErrorComponent) {\n  <ng-container\n    *ngComponentOutlet=\"previewErrorComponent\"\n  />\n  } @if (loadingProgressValue() < loadingEnum.READY && loadingProgressValue() !== loadingEnum.ERROR)\n  {\n  <div class=\"adev-embedded-editor-preview-loading\">\n    @switch (loadingProgressValue()) { @case (loadingEnum.NOT_STARTED) {\n    <span class=\"adev-embedded-editor-preview-loading-starting\">Starting</span>\n    } @case (loadingEnum.BOOT) {\n    <span class=\"adev-embedded-editor-preview-loading-boot\">Booting</span>\n    } @case (loadingEnum.LOAD_FILES) {\n    <span class=\"adev-embedded-editor-preview-loading-load-files\">Creating project</span>\n    } @case (loadingEnum.INSTALL) {\n    <span class=\"adev-embedded-editor-preview-loading-install\">Installing packages</span>\n    } @case (loadingEnum.START_DEV_SERVER) {\n    <span class=\"adev-embedded-editor-preview-loading-start-dev-server\">\n      Initializing dev server\n    </span>\n    } }\n    <progress\n      title=\"Preview progress\"\n      [value]=\"loadingProgressValue()\"\n      [max]=\"loadingEnum.READY\"\n    ></progress>\n  </div>\n  }\n</div>\n", styles: [":host{display:block;height:calc(100% - 50px)}.adev-dark-mode :host .adev-embedded-editor-preview-container{background:var(--gray-100)}:host:has(.adev-preview-error) .adev-embedded-editor-preview-container{overflow-y:auto}.adev-embedded-editor-preview-container{display:flex;width:100%;height:100%;position:relative;color:#000;background:#fff;transition:background .3s ease;box-sizing:border-box}.adev-embedded-editor-preview-container iframe{width:100%;height:100%;border:0}.adev-embedded-editor-preview-container .adev-embedded-editor-preview-loading{display:flex;flex-direction:column;justify-content:center;align-items:center;gap:.5rem;position:absolute;inset:0;margin:auto;width:100%;height:100%;background:#fff}/*# sourceMappingURL=preview.component.css.map */\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgComponentOutlet, selector: "[ngComponentOutlet]", inputs: ["ngComponentOutlet", "ngComponentOutletInputs", "ngComponentOutletInjector", "ngComponentOutletContent", "ngComponentOutletNgModule", "ngComponentOutletNgModuleFactory"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.1.0-next.1", ngImport: i0, type: Preview, decorators: [{
            type: Component,
            args: [{ standalone: true, selector: 'docs-tutorial-preview', changeDetection: ChangeDetectionStrategy.OnPush, imports: [CommonModule, NgIf, NgSwitch, NgSwitchCase], template: "<div class=\"adev-embedded-editor-preview-container\">\n  @if (loadingProgressValue() !== loadingEnum.ERROR) {\n  <iframe\n    #preview\n    class=\"adev-embedded-editor-preview\"\n    allow=\"cross-origin-isolated\"\n    title=\"Editor preview\"\n  ></iframe>\n  } @if (previewErrorComponent) {\n  <ng-container\n    *ngComponentOutlet=\"previewErrorComponent\"\n  />\n  } @if (loadingProgressValue() < loadingEnum.READY && loadingProgressValue() !== loadingEnum.ERROR)\n  {\n  <div class=\"adev-embedded-editor-preview-loading\">\n    @switch (loadingProgressValue()) { @case (loadingEnum.NOT_STARTED) {\n    <span class=\"adev-embedded-editor-preview-loading-starting\">Starting</span>\n    } @case (loadingEnum.BOOT) {\n    <span class=\"adev-embedded-editor-preview-loading-boot\">Booting</span>\n    } @case (loadingEnum.LOAD_FILES) {\n    <span class=\"adev-embedded-editor-preview-loading-load-files\">Creating project</span>\n    } @case (loadingEnum.INSTALL) {\n    <span class=\"adev-embedded-editor-preview-loading-install\">Installing packages</span>\n    } @case (loadingEnum.START_DEV_SERVER) {\n    <span class=\"adev-embedded-editor-preview-loading-start-dev-server\">\n      Initializing dev server\n    </span>\n    } }\n    <progress\n      title=\"Preview progress\"\n      [value]=\"loadingProgressValue()\"\n      [max]=\"loadingEnum.READY\"\n    ></progress>\n  </div>\n  }\n</div>\n", styles: [":host{display:block;height:calc(100% - 50px)}.adev-dark-mode :host .adev-embedded-editor-preview-container{background:var(--gray-100)}:host:has(.adev-preview-error) .adev-embedded-editor-preview-container{overflow-y:auto}.adev-embedded-editor-preview-container{display:flex;width:100%;height:100%;position:relative;color:#000;background:#fff;transition:background .3s ease;box-sizing:border-box}.adev-embedded-editor-preview-container iframe{width:100%;height:100%;border:0}.adev-embedded-editor-preview-container .adev-embedded-editor-preview-loading{display:flex;flex-direction:column;justify-content:center;align-items:center;gap:.5rem;position:absolute;inset:0;margin:auto;width:100%;height:100%;background:#fff}/*# sourceMappingURL=preview.component.css.map */\n"] }]
        }], ctorParameters: () => [], propDecorators: { previewIframe: [{
                type: ViewChild,
                args: ['preview']
            }] } });
//# sourceMappingURL=data:application/json;base64,