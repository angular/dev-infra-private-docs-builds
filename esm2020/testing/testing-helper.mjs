/*!
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.dev/license
 */
import { WebContainer, } from '@webcontainer/api';
export class FakeEventTarget {
    constructor() {
        this.listeners = new Map();
    }
    addEventListener(type, listener) {
        const listeners = this.listeners.get(type) || [];
        listeners.push(listener);
        this.listeners.set(type, listeners);
    }
    removeEventListener(type, listener) {
        const listeners = this.listeners.get(type);
        if (listeners) {
            const index = listeners.indexOf(listener);
            if (index !== -1) {
                listeners.splice(index, 1);
            }
        }
    }
    dispatchEvent(event) {
        const listeners = this.listeners.get(event.type);
        if (listeners) {
            for (const listener of listeners) {
                if (typeof listener === 'function') {
                    listener.call(this, event);
                }
                else {
                    listener.handleEvent(event);
                }
            }
        }
        return true;
    }
}
export class MockLocalStorage {
    constructor() {
        this.items = new Map();
    }
    getItem(key) {
        return this.items.get(key) ?? null;
    }
    setItem(key, value) {
        this.items.set(key, value);
    }
}
export class FakeChangeDetectorRef {
    markForCheck() { }
    detach() { }
    checkNoChanges() { }
    reattach() { }
    detectChanges() { }
}
export class FakeWebContainer extends WebContainer {
    constructor(fakeOptions) {
        super();
        this.fakeSpawn = undefined;
        this.fs = new FakeFileSystemAPI();
        if (fakeOptions?.spawn)
            this.fakeSpawn = fakeOptions.spawn;
    }
    spawn(command, args, options) {
        if (this.fakeSpawn)
            return Promise.resolve(this.fakeSpawn);
        const fakeProcess = new FakeWebContainerProcess();
        return Promise.resolve(fakeProcess);
    }
    on(event, listener) {
        return () => { };
    }
    mount(tree, options) {
        return Promise.resolve();
    }
    get path() {
        return '/fake-path';
    }
    get workdir() {
        return '/fake-workdir';
    }
    teardown() { }
}
class FakeFileSystemAPI {
    readdir(path, options) {
        return Promise.resolve(['/fake-dirname']);
    }
    readFile(path, encoding) {
        return Promise.resolve('fake file content');
    }
    writeFile(path, data, options) {
        return Promise.resolve();
    }
    mkdir(path, options) {
        return Promise.resolve();
    }
    rm(path, options) {
        return Promise.resolve();
    }
    rename(oldPath, newPath) {
        throw Error('Not implemented');
    }
    watch(filename, options, listener) {
        throw Error('Not implemented');
    }
}
export class FakeWebContainerProcess {
    constructor() {
        this.exit = Promise.resolve(0);
        this.input = new WritableStream();
        this.output = new ReadableStream();
    }
    kill() { }
    resize(dimensions) { }
}
//# sourceMappingURL=data:application/json;base64,